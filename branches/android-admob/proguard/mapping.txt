com.kitmaker.finalkombat.ActivityMain -> com.kitmaker.finalkombat.ActivityMain:
    com.kitmaker.finalkombat.ActivityMain ms_vMain -> a
    android.content.Context ms_Context -> b
    com.kitmaker.finalkombat.MidletFinalKombat ms_MIDlet -> c
    javax.microedition.lcdui.Canvas ms_Canvas -> d
    android.content.res.Resources ms_Resources -> e
    android.content.res.AssetManager ms_AssetManager -> f
    int BITMAP_FOLDER -> g
    int[][] SCREEN_SIZES -> h
    int ms_iKeyboardType -> i
    int ms_iScreenTouchType -> j
    int ms_iNavigationPadType -> k
    java.lang.String ms_zLanguage -> l
    java.lang.String ms_zAppVersion -> m
    java.lang.String ms_zDeviceID -> n
    float ms_fCanvasWidth -> o
    float ms_fCanvasHeight -> p
    float ms_fWidthPercent -> q
    float ms_fHeightPercent -> r
    java.lang.String[] ms_zJAD -> t
    boolean ms_bPause -> s
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void setCanvas(javax.microedition.lcdui.Canvas) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void openJAD() -> a
    void onPause() -> onPause
    void pause() -> b
    void onResume() -> onResume
    void unpause() -> c
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    java.lang.String getDeviceID() -> d
com.kitmaker.finalkombat.Define -> com.kitmaker.finalkombat.a:
    byte Language -> a
    byte NumeroIdiomas -> b
    java.lang.String[][] menuIdiSon -> c
    java.lang.String[][] menuAdvertencia -> d
    java.lang.String[][] intro -> e
    java.lang.String[][] ending -> f
    java.lang.String[][] menu -> g
    java.lang.String[][] about -> h
    java.lang.String[][] menuPausa -> i
    java.lang.String[][] instrucciones -> j
    java.lang.String[][] finFase -> k
    java.lang.String[][] menuMuerte -> l
    int CorrectorIngles -> m
    int tactilCorreccion -> n
com.kitmaker.finalkombat.Ktext -> com.kitmaker.finalkombat.b:
    void drawText(javax.microedition.lcdui.Graphics,java.lang.String,javax.microedition.lcdui.game.Sprite,int,int) -> a
    void background(javax.microedition.lcdui.Graphics,javax.microedition.lcdui.Image) -> a
com.kitmaker.finalkombat.MidletFinalKombat -> com.kitmaker.finalkombat.c:
    com.kitmaker.finalkombat.MidletFinalKombat midlet -> a
    com.kitmaker.finalkombat.SuperCanvas ms_vMain -> b
    javax.microedition.lcdui.Display ms_vDisplay -> c
    java.lang.Thread ms_vThread -> d
    void quitApp() -> a
com.kitmaker.finalkombat.SndManager -> com.kitmaker.finalkombat.SndManager:
    boolean ms_bSound -> a
    android.media.AudioManager ms_vAudioManager -> d
    android.content.Context ms_vContext -> e
    android.media.SoundPool ms_vFXPool -> f
    android.media.MediaPlayer ms_vMusicPlayer -> g
    int ms_iCurrentClip -> b
    float ms_fVolume -> c
    int[] MUSIC_FILE -> h
    void InitSndManager(android.content.Context) -> a
    void PlayMusic(int,boolean) -> a
    void PauseMusic() -> a
    void UnpauseMusic() -> b
    void StopMusic() -> c
    void PlayFX(int) -> a
    void FlushSndManager() -> d
com.kitmaker.finalkombat.SuperCanvas -> com.kitmaker.finalkombat.d:
    javax.microedition.lcdui.Image ms_vCanvas -> a
    boolean ms_bFinishApp -> b
    javax.microedition.rms.RecordStore gRecordLang -> c
    javax.microedition.rms.RecordStore gRecordMemoryCard -> d
    java.lang.String mylanguage -> e
    java.lang.String myLevelCompleted -> f
    boolean noLanguage -> g
    boolean partidaGuardada -> h
    boolean godMode -> i
    int ms_iFrameTicks -> j
    long ms_lCurrentTime -> k
    long ms_lLastFrameTime -> l
    int ms_iTicksPerSecond -> m
    int ms_iMillisPerTick -> n
    long ms_lTickTime -> o
    int limiteScrollIzq -> p
    int limiteScrollDer -> q
    boolean kanforSound -> r
    boolean bugWaviniciado -> s
    byte nivelVolumen -> t
    int PosXtemp1 -> u
    int PosYtemp1 -> v
    int PosXtemp2 -> w
    int PosYtemp2 -> x
    int estadoTemp -> y
    int opcionSelect -> z
    int debugKeycode -> A
    int tiempo -> B
    boolean submenu -> C
    boolean mostrarAdvertencia -> D
    boolean gameStarted -> E
    boolean juegoIniciado -> F
    boolean partidaIniciada -> G
    int limiteFase -> H
    boolean graficosYaCargados -> I
    javax.microedition.lcdui.Image logoKitmaker -> J
    javax.microedition.lcdui.Image abomb -> K
    javax.microedition.lcdui.Image ifont1 -> L
    javax.microedition.lcdui.game.Sprite sfont1 -> M
    javax.microedition.lcdui.Image ifont2 -> N
    javax.microedition.lcdui.game.Sprite sfont2 -> O
    javax.microedition.lcdui.Image ifont3 -> P
    javax.microedition.lcdui.game.Sprite sfont3 -> Q
    javax.microedition.lcdui.Image ladrilloFondo1 -> R
    javax.microedition.lcdui.Image fondoMenu -> S
    javax.microedition.lcdui.Image fondoCielo1 -> T
    javax.microedition.lcdui.Image fondoCieloTrans -> U
    javax.microedition.lcdui.Image ibotones -> V
    javax.microedition.lcdui.game.Sprite sbotones -> W
    javax.microedition.lcdui.Image duke_intro -> X
    javax.microedition.lcdui.Image tablero -> Y
    javax.microedition.lcdui.Image pad -> Z
    javax.microedition.lcdui.Image boton -> aa
    int posYTablero -> ab
    int alturaTablero -> ac
    int centradoPalancaX -> ad
    int centradoPalancaY -> ae
    int contadorPulsacionTactil -> af
    boolean pulsacionTactil -> ag
    byte tiempoTactil -> ah
    int unDecimo -> ai
    int unSexto -> aj
    int unTercio -> ak
    int unCuarto -> al
    int unMedio -> am
    int mitadWidth -> an
    boolean pause -> ao
    boolean direccionDuke -> ap
    boolean dukeMuere -> aq
    boolean menuMuerte -> ar
    boolean menuFinFase -> as
    int tiempoMuerto -> at
    int tiempoGolpe -> au
    int scrollX -> av
    boolean pressUp -> aw
    boolean pressDown -> ax
    boolean pressLeft -> ay
    boolean pressRight -> az
    boolean pressFight -> aA
    byte fotograma -> aB
    byte fuerzaSalto -> aC
    byte saltoDesplazMax -> aD
    boolean salto -> aE
    boolean colision -> aF
    byte numeroVidas -> aG
    byte numeroBombas -> aH
    int tiempoBomba -> aI
    int puntosFinFase -> aJ
    boolean patadaAerea -> aK
    byte contadorPatada -> aL
    int velocidadAnimacion -> aM
    int velocidadMaxAnimacion -> aN
    byte animacion -> aO
    int tiempoCombo -> aP
    byte COMBO -> aQ
    boolean pintarDuke -> aR
    javax.microedition.lcdui.Image iduke -> aS
    javax.microedition.lcdui.game.Sprite duke -> aT
    int dukePosX -> aU
    int dukePosY -> aV
    javax.microedition.lcdui.Image ininja1 -> aW
    javax.microedition.lcdui.Image ininja2 -> aX
    javax.microedition.lcdui.game.Sprite sninja1 -> aY
    javax.microedition.lcdui.game.Sprite sninja1rotado -> aZ
    javax.microedition.lcdui.game.Sprite sninja2 -> ba
    javax.microedition.lcdui.game.Sprite sninja1muertoDer -> bb
    javax.microedition.lcdui.game.Sprite sninja1muertoIzq -> bc
    byte numerGolpesMatarNinja1 -> bd
    boolean[] direccionNinja -> be
    javax.microedition.lcdui.Image iDinamita -> bf
    javax.microedition.lcdui.Image iDinamitaMarcador -> bg
    javax.microedition.lcdui.Image iDinamitaOk -> bh
    javax.microedition.lcdui.game.Sprite sDinamita -> bi
    javax.microedition.lcdui.game.Sprite sDinamitaMarcador -> bj
    byte frameDinamita -> bk
    javax.microedition.lcdui.Image isuelo -> bl
    javax.microedition.lcdui.game.Sprite ssuelo -> bm
    javax.microedition.lcdui.Image itienda -> bn
    javax.microedition.lcdui.Image plataformaMetalica -> bo
    int plataformaMetalicaY1 -> bp
    int plataformaMetalicaY2 -> bq
    int bombaPosY -> br
    javax.microedition.lcdui.Image oscurecer -> bs
    javax.microedition.lcdui.Image ladrillo1 -> bt
    javax.microedition.lcdui.Image cartel1 -> bu
    javax.microedition.lcdui.Image cartel2 -> bv
    javax.microedition.lcdui.Image cartel3 -> bw
    javax.microedition.lcdui.Image senefa1 -> bx
    javax.microedition.lcdui.Image ventana1 -> by
    javax.microedition.lcdui.Image paredbaja1 -> bz
    javax.microedition.lcdui.Image fondocielo -> bA
    javax.microedition.lcdui.Image ladrillo2 -> bB
    javax.microedition.lcdui.Image barril -> bC
    javax.microedition.lcdui.Image vidas -> bD
    javax.microedition.lcdui.Image policeCar -> bE
    javax.microedition.lcdui.Image botonPausa -> bF
    byte fotogramasDuke -> bG
    int alturaSuelo -> bH
    int anchuraSuelo -> bI
    int alturaTienda -> bJ
    int anchuraTienda -> bK
    int alturaDuke -> bL
    int anchuraDuke -> bM
    int alturaCartel1 -> bN
    int anchuraCartel1 -> bO
    int alturaPlataforma -> bP
    int anchuraPlataforma -> bQ
    int alturaFondocielo -> bR
    int anchuraFondocielo -> bS
    int alturaSenefa -> bT
    int anchuraSenefa -> bU
    int alturaLadrillo2 -> bV
    int anchuraLadrillo2 -> bW
    int alturaLadrillo1 -> bX
    int anchuraLadrillo1 -> bY
    int alturaParedbaja1 -> bZ
    int anchuraParedbaja1 -> ca
    int alturaVentana1 -> cb
    int anchuraVentana1 -> cc
    int alturaPoliceCar -> cd
    int anchuraPoliceCar -> ce
    int anchuraDinamita -> cf
    int alturaDinamita -> cg
    int anchuraNinja -> ch
    int alturaNinja -> ci
    int anchuraNinja2 -> cj
    int alturaNinja2 -> ck
    java.lang.String nombreFase -> cl
    byte ESTADO -> cm
    byte LOGO -> cn
    byte MENUIDIOMAINIC -> co
    byte MENUSONIDOINIC -> cp
    byte INTROMENU -> cq
    byte MENU -> cr
    byte SUBMENU -> cs
    byte INSTRUCCIONES -> ct
    byte ABOUT -> cu
    byte SALIR -> cv
    byte CONTINUAR -> cw
    byte NEWGAME -> cx
    byte MENUANIMADO -> cy
    byte GAMEOVER -> cz
    byte JUGAR -> cA
    byte FASEAJUGAR -> cB
    byte FASE11 -> cC
    byte FASE12 -> cD
    byte FASE13 -> cE
    byte FASE21 -> cF
    byte FASE22 -> cG
    byte FASE23 -> cH
    byte FASE31 -> cI
    byte FASE32 -> cJ
    byte FASE33 -> cK
    byte FINAL -> cL
    int avanceNinja -> cM
    int ninja1PoxY -> cN
    byte[] Ninja1Vida -> cO
    int ninja2PoxY -> cP
    int ninja2Margen -> cQ
    byte frameNinja -> cR
    byte[] frameNinjaFinal -> cS
    int[] ninjaPosXeditable -> cT
    int[] ninjaPosXeditable2 -> cU
    int[] Ninja2Delta -> cV
    int[] Ninja2Tiempo -> cW
    int[] Ninja2Frame -> cX
    byte ESTADONINJA2 -> cY
    byte NINJA2PARADODERECHA -> cZ
    byte NINJA2CORRIENDOIZQUIERDA -> da
    byte NINJA2PARADOIZQUIERDA -> db
    byte NINJA2CORRIENDODERECHA -> dc
    int[] mapaLadrillo -> dd
    int[] mapaTiendas -> de
    int[] mapaVentanas -> df
    int[] mapaSenefas -> dg
    int[] mapaMetalicas1 -> dh
    int[] mapaMetalicas2 -> di
    int[] Bomba -> dj
    int[] BombaReset -> dk
    int[] NinjaPosX -> dl
    int[] Ninja2PosX -> dm
    int correccionContinue -> dn
    boolean TOUCHSCREEN_SUPPORTED -> do
    int ms_iScreenOrigin_X -> dp
    int ms_iScreenOrigin_Y -> dq
    int ms_iScreenTouched_X -> dr
    int ms_iScreenTouched_Y -> ds
    int ms_iScreenTouched_Map -> dt
    int ms_iScreenTouched_Frames -> du
    void run() -> run
    void cargarGraficos() -> g
    void borrarGraficos() -> h
    void paint(javax.microedition.lcdui.Graphics) -> a
    void newGame(javax.microedition.lcdui.Graphics) -> b
    void finalAnimado(javax.microedition.lcdui.Graphics) -> c
    void gameover(javax.microedition.lcdui.Graphics) -> d
    void pasafotograma() -> i
    void colision() -> j
    void pausaCorta(int) -> c
    void resetJuego() -> k
    void controlFPS() -> l
    void keyPressed(int) -> a
    void keyReleased(int) -> b
    void pointerPressed(int,int) -> a
    void pointerReleased$255f295() -> a
    void pointerDragged(int,int) -> b
    boolean GameScreenTouched$25decb9() -> m
    boolean GameScreenTouched$604ec2f9(int,int,int,int) -> a
    void matricesFases() -> n
    void iniciarLenguaje() -> o
    void writeLanguage(java.lang.String) -> a
    java.lang.String readLanguage() -> p
    void destroyLanguage() -> q
    void iniciarMemoryCard() -> r
    void writeMemoryCard(java.lang.String) -> b
    java.lang.String readMemoryCard() -> s
    void destroyMemoryCard() -> t
    void hideNotify() -> b
    void showNotify() -> c
javax.microedition.lcdui.Canvas -> a.a.a.a:
    javax.microedition.lcdui.Graphics ms_vGraphics -> dv
    javax.microedition.lcdui.Canvas$CanvasView m_View -> dw
    char ms_iKeyChar_Map -> dx
    void paint(javax.microedition.lcdui.Graphics) -> a
    void pointerPressed(int,int) -> a
    void pointerDragged(int,int) -> b
    void pointerReleased$255f295() -> a
    void repaint() -> d
    void keyPressed(int) -> a
    void keyReleased(int) -> b
    void pause() -> e
    void unpause() -> f
    void hideNotify() -> b
    void showNotify() -> c
javax.microedition.lcdui.Canvas$CanvasView -> a.a.a.b:
    android.view.SurfaceHolder m_SurfaceHolder -> a
    javax.microedition.lcdui.Canvas this$0 -> b
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
javax.microedition.lcdui.Display -> a.a.a.c:
    java.util.Hashtable DISPLAYS -> a
    javax.microedition.midlet.MIDlet midlet -> b
    javax.microedition.lcdui.Display getDisplay(javax.microedition.midlet.MIDlet) -> a
    void setCurrent$51c0f892() -> a
javax.microedition.lcdui.Displayable -> a.a.a.d:
    java.util.Vector commands -> a
javax.microedition.lcdui.Font -> a.a.a.e:
    int[] FNT_SIZE -> a
    int m_iFontFace -> b
    int m_iFontStyle -> c
    int m_iFontSize -> d
    int m_iFontHeight -> e
    android.graphics.Paint m_vPaint -> f
    javax.microedition.lcdui.Font getFont$5f1a086() -> a
javax.microedition.lcdui.Graphics -> a.a.a.f:
    int SIZEX -> a
    int SIZEY -> b
    int m_iSizeX -> c
    int m_iSizeY -> d
    float m_fSizeX -> e
    float m_fSizeY -> f
    float m_fAngle -> g
    android.graphics.Canvas ms_vCanvas -> h
    android.graphics.Canvas m_vCanvas -> i
    android.graphics.Paint m_vPaint -> j
    javax.microedition.lcdui.Font ms_vCurrentFont -> k
    int[] SINCOS -> l
    int[] THUNDER_COLOR -> m
    int THUNDER_RANDOM_FACTOR -> n
    void setColor(int,int,int) -> a
    void fillRect$3b4dfe4b(int,int) -> a
    void drawImage(javax.microedition.lcdui.Image,int,int,int) -> a
    void drawRegion$22f07d0d(javax.microedition.lcdui.Image,int) -> a
javax.microedition.lcdui.Image -> a.a.a.g:
    android.graphics.Bitmap m_vBitmap -> a
    float m_fSizeX -> b
    float m_fSizeY -> c
    javax.microedition.lcdui.Graphics getGraphics() -> a
    android.graphics.Bitmap getBitmap() -> b
    int getHeight() -> c
    int getWidth() -> d
    javax.microedition.lcdui.Image createImage(java.lang.String) -> a
javax.microedition.lcdui.game.Layer -> a.a.a.a.a:
    int x -> a
    int y -> b
    int width -> c
    int height -> d
    boolean visible -> e
    void setPosition(int,int) -> a
    int getWidth() -> a
    int getHeight() -> b
javax.microedition.lcdui.game.Sprite -> a.a.a.a.b:
    android.graphics.Bitmap sourceImage -> f
    int numberFrames -> g
    int[] frameCoordsX -> h
    int[] frameCoordsY -> i
    int srcFrameWidth -> j
    int srcFrameHeight -> k
    int[] frameSequence -> l
    int sequenceIndex -> A
    boolean customSequenceDefined -> B
    int dRefX -> m
    int dRefY -> n
    int collisionRectX -> o
    int collisionRectY -> p
    int collisionRectWidth -> q
    int collisionRectHeight -> r
    int t_currentTransformation -> s
    int t_collisionRectX -> t
    int t_collisionRectY -> u
    int t_collisionRectWidth -> v
    int t_collisionRectHeight -> w
    android.graphics.Paint mPaint -> x
    android.graphics.Rect mSrcRect -> y
    android.graphics.Rect mDestRect -> z
    void defineReferencePixel(int,int) -> b
    void setFrame(int) -> a
    int getFrame() -> c
    void paint(javax.microedition.lcdui.Graphics) -> a
    void defineCollisionRectangle$3b4dfe4b(int,int) -> c
    void setTransform(int) -> b
    boolean collidesWith$a158edb(javax.microedition.lcdui.Image,int,int) -> a
    void initializeFrames$63f0777b(android.graphics.Bitmap,int,int) -> a
    void setTransformImpl(int) -> c
    int getTransformedPtX(int,int,int) -> a
    int getTransformedPtY(int,int,int) -> b
javax.microedition.midlet.MIDlet -> a.a.b.a:
    java.util.Properties DEFAULT_APPLICATION_PROPERTIES -> e
    java.util.Properties applicationProperties -> a
    void notifyDestroyed() -> b
javax.microedition.rms.InvalidRecordIDException -> a.a.c.a:
javax.microedition.rms.RecordStore -> a.a.c.b:
    javax.microedition.rms.RecordStoreSqlLite sqlLite -> b
    java.util.HashMap openedRecordStores -> c
    java.lang.String name -> d
    int version -> e
    long recordStorePk -> a
    int numRecords -> f
    int size -> g
    long sizeAvailable -> h
    int nextRecordID -> i
    int openCount -> j
    int authMode -> k
    java.util.List listeners -> l
    void deleteRecordStore(java.lang.String) -> a
    javax.microedition.rms.RecordStore openRecordStore$67ee2b13(java.lang.String) -> b
    void closeRecordStore() -> a
    int getVersion() -> b
    int getNumRecords() -> c
    int getSize() -> d
    int addRecord$1cf967b1(byte[],int) -> a
    void updateRecordStoreInstance(javax.microedition.rms.RecordStore) -> a
    int getRecordSize(int) -> a
    byte[] getRecord(int) -> b
    void setRecord$101cc16b(byte[],int) -> b
    boolean isClosed() -> e
    void fireRecordAddedEvent$13462e() -> f
    void setVersion(int) -> c
    void setNextId(int) -> d
    void setNumberOfRecords(int) -> e
    void setSize(int) -> f
    void cacheRecordStore(java.lang.String,javax.microedition.rms.RecordStore) -> a
javax.microedition.rms.RecordStoreException -> a.a.c.c:
javax.microedition.rms.RecordStoreFullException -> a.a.c.d:
javax.microedition.rms.RecordStoreNotFoundException -> a.a.c.e:
javax.microedition.rms.RecordStoreNotOpenException -> a.a.c.f:
javax.microedition.rms.RecordStoreSqlLite -> a.a.c.g:
    android.database.sqlite.SQLiteDatabase database -> a
    javax.microedition.rms.RecordStoreSqlLite instance -> b
    javax.microedition.rms.RecordStoreSqlLite getInstance() -> a
    javax.microedition.rms.RecordStore getRecordStore(java.lang.String) -> a
    javax.microedition.rms.RecordStore getRecordStore(long) -> a
    javax.microedition.rms.RecordStore extractRecordStore(android.database.Cursor) -> a
    javax.microedition.rms.RecordStore createRecordStore(java.lang.String) -> b
    void deleteRecordStore(java.lang.String) -> c
    int addRecord(long,byte[]) -> a
    byte[] getRecord(long,int) -> a
    void setRecord$39911145(long,byte[]) -> b
javax.microedition.rms.RecordStoreSqlLite$RecordStoreSqliteOpenHelper -> a.a.c.h:
    javax.microedition.rms.RecordStoreSqlLite this$0 -> a
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
